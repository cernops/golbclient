---
image: gitlab-registry.cern.ch/linuxsupport/cc7-base
stages:
  - build
  - test
  - snmpd
  - benchmark
  - build_rpm
  - koji_scratch
  - koji
  - deploy_qa
  - deploy_prod


before_script:
  - yum -y install --exclude python2-libcomps  krb5-workstation koji rpm-build rpmdevtools
  - mkdir -p /go/src/gitlab.cern.ch/lb-experts
  - if [ -d /builds ] ;  then  export PREFIX=/builds  ;  fi
  - ln -s $PREFIX/lb-experts/golbclient /go/src/gitlab.cern.ch/lb-experts/golbclient
 # Support both Go1.11 and Go1.10 >
  - yum -y install git
  - mkdir /go11 /go10 /go09
  - curl https://dl.google.com/go/go1.9.7.linux-amd64.tar.gz  | tar -zxC /go09
  - curl https://dl.google.com/go/go1.11.2.linux-amd64.tar.gz | tar -zxC /go11
  - curl https://dl.google.com/go/go1.10.5.linux-amd64.tar.gz | tar -zxC /go10
  - ln -s /go11/go/bin/go /usr/bin/go11
  - ln -s /go10/go/bin/go /usr/bin/go10
  - ln -s /go09/go/bin/go /usr/bin/go09
 # />
  - cd /go/src/gitlab.cern.ch/lb-experts/golbclient
  - export SPEC=$(ls *spec)
  - RELEASE=`grep 'Release = "' lbclient.go | awk -F \" '{print $2}'`
  - VERSION=`grep 'Version = "' lbclient.go | awk -F \" '{print $2}'`
  - cat $SPEC | sed "s/#REPLACE_BY_VERSION#/$VERSION/" > $SPEC.tmp
  - cat $SPEC.tmp | sed "s/#REPLACE_BY_RELEASE#/$RELEASE/" > $SPEC
  - export PKG=$(rpm -q --specfile $SPEC --queryformat "%{name}-%{version}\n" | head -n 1)
  - export PKG_REL6=$(rpm -q --define "dist .ai6" --specfile $SPEC --queryformat "%{name}-%{version}-%{release}\n" | head -n 1)
  - export PKG_REL7=$(rpm -q --define "dist .ai7" --specfile $SPEC --queryformat "%{name}-%{version}-%{release}\n" | head -n 1)
  - echo $LBBUILD_PASSWORD | kinit lbbuild@CERN.CH
  - klist
  - printf "[koji]\nserver = https://kojihub.cern.ch/kojihub\nweburl = https://koji.cern.ch/koji\ntopurl = https://koji.cern.ch/kojifiles\nkrb_canon_host = no\nkrb_rdns = False" > .koji
 # [lemon-cli]
  - ln -s $PREFIX/lb-experts/golbclient/scripts/lemon-cli /usr/sbin/lemon-cli
 # [collectdctl]
  - ln -s $PREFIX/lb-experts/golbclient/scripts/collectdctl /usr/bin/collectdctl


.build-go09:
  stage: build
  script:
    - export GOPATH=/go
    - go09 get ./...
    - go09 build -race

.build-go10:
  stage: build
  script:
    - export GOPATH=/go
    - go10 get ./...
    - go10 build -race

.build-go11:
  stage: build
  script:
    - go11 build -race ./...

.test-go09:
  stage: test
  script:
    - export GOPATH=/go && go09 get ./...
    - go09 test -v -cover ./tests/ci/...
    - go09 test -race ./tests/ci/...

.test-go10:
  stage: test
  script:
    - export GOPATH=/go && go10 get ./...
    - go10 test -v -cover ./tests/ci/...
    - go10 test -race ./tests/ci/...

.test-go11:
  stage: test
  script:
    - go11 test -v -cover ./tests/ci/...
    - go11 test -race ./tests/ci/...

test-snmpd-call:
  stage: snmpd
  before_script:
    - yum install net-snmp-utils golang git -y
  script:
    - go get ./...
    - go build -o /usr/local/sbin/lbclient
    - /usr/bin/snmpget -v 3 -u loadbalancing -l authNoPriv -a MD5 -A $SNMP_AUTH localhost .1.3.6.1.4.1.96.255.1

.bench-go09:
  stage: benchmark
  script:
    - export GOPATH=/go && go09 get ./...
    - go09 test ./tests/benchmarking/... -bench=. -benchmem
    - go09 test ./tests/benchmarking/... -bench=. -benchmem -race

.bench-go10:
  stage: benchmark
  script:
    - export GOPATH=/go && go10 get ./...
    - go10 test ./tests/benchmarking/... -bench=. -benchmem
    - go10 test ./tests/benchmarking/... -bench=. -benchmem -race

.bench-go11:
  stage: benchmark
  script:
    - go11 test ./tests/benchmarking/... -bench=. -benchmem
    - go11 test ./tests/benchmarking/... -bench=. -benchmem -race

.build_rpm:
  stage: build_rpm
  script:
    - cd $PREFIX/lb-experts/golbclient
    - go11 mod vendor
    - mkdir SOURCES version
    - tar cvf SOURCES/$PKG.tg  --exclude SOURCES --exclude .git --exclude .koji --exclude .gitlab-ci.yml --exclude go.mod --exclude go.sum --transform "s||$PKG/|" .
    - gzip -c SOURCES/$PKG.tg > SOURCES/$PKG.tgz
    - rm -rf SOURCES/$PKG.tg
    - rpmbuild -bs --define "_topdir $(pwd)" -D "dist .ai7" $SPEC
    - rpmbuild -bs --define "_topdir $(pwd)" -D "dist .ai6" $SPEC
  artifacts:
    paths:
      - SRPMS/
    expire_in: 1 week


.kojicheck:
  stage: koji_scratch
  script:
    - echo "Checking if $PKG_REL exists"
    - if koji --config=.koji search -r build $PKG | egrep  "$PKG_REL6|$PKG_REL7" ; then exit 1; fi
  allow_failure: true

.kojiscratch:
  stage: koji_scratch
  script:
    - echo "koji build --wait --scratch $KOJI_TARGET SRPMS/${PKG_REL7}.src.rpm"
    - koji --config=.koji build --wait --scratch $KOJI_TARGET SRPMS/${PKG_REL7}.src.rpm
    - echo "Building on ai6"
    -  koji --config=.koji build --wait --scratch ai6 SRPMS/${PKG_REL6}.src.rpm

.koji:
  stage: koji
  script:
    - echo "koji build --wait $KOJI_TARGET SRPMS/${PKG_REL7}.src.rpm"
    - koji --config=.koji build --wait $KOJI_TARGET SRPMS/${PKG_REL7}.src.rpm
    - echo "Building also on ai6 SRPMS/${PKG_REL6}.src.rpm"
    - koji --config=.koji build --wait ai6 SRPMS/${PKG_REL6}.src.rpm
  only:
    - tags

.tag_qa:
  stage: deploy_qa
  when: manual
  only:
    - tags
  script:
    - koji --config=.koji tag-pkg ${KOJI_TARGET}-qa ${PKG_REL7}
    - koji --config=.koji tag-pkg ai6-qa ${PKG_REL6}
  allow_failure: false

.tag_prod:
  stage: deploy_prod
  when: manual
  only:
    - tags
  script:
    - koji --config=.koji tag-pkg ${KOJI_TARGET}-stable ${PKG_REL7}
    - koji --config=.koji tag-pkg ai6-stable ${PKG_REL6}

