---
image: gitlab-registry.cern.ch/linuxsupport/cc7-base
stages:
  - build
  - test
  - build_rpm
  - koji_scratch
  - koji
  - deploy_qa
  - deploy_prod


before_script:
  - yum -y install --exclude python2-libcomps  krb5-workstation koji rpm-build rpmdevtools
  - mkdir -p /go/src/gitlab.cern.ch/lb-experts
  - if [ -d /builds ] ;  then  export PREFIX=/builds  ;  fi
  - ln -s $PREFIX/lb-experts/golbclient /go/src/gitlab.cern.ch/lb-experts/golbclient
 # Support both Go1.11 and Go1.10 >
  - yum -y install git
  - mkdir /go11 /go10
  - curl https://dl.google.com/go/go1.11.2.linux-amd64.tar.gz | tar -zxC /go11
  - curl https://dl.google.com/go/go1.10.5.linux-amd64.tar.gz | tar -zxC /go10
  - ln -s /go11/go/bin/go /usr/bin/go11
  - ln -s /go10/go/bin/go /usr/bin/go10
 # />
  - cd /go/src/gitlab.cern.ch/lb-experts/golbclient
  - export SPEC=$(ls *spec)
  - export PKG=$(rpm -q --specfile $SPEC --queryformat "%{name}-%{version}\n" | head -n 1)
  - export PKG_REL=$(rpm -q --specfile $SPEC --queryformat "%{name}-%{version}-%{release}\n" | head -n 1)
  - echo $LBBUILD_PASSWORD | kinit lbbuild@CERN.CH
  - klist
  - printf "[koji]\nserver = https://kojihub.cern.ch/kojihub\nweburl = https://koji.cern.ch/koji\ntopurl = https://koji.cern.ch/kojifiles\nkrb_canon_host = no\nkrb_rdns = False" > .koji
 # [lemon-cli]
  - ln -s $PREFIX/lb-experts/golbclient/scripts/lemon-cli /usr/sbin/lemon-cli
 # [collectdctl]
  - ln -s $PREFIX/lb-experts/golbclient/scripts/collectdctl /usr/bin/collectdctl


.build-go10:
  stage: build
  script:
    - export GOPATH=/go
    - go10 get ./...
    - go10 build -race

.build-go11:
  stage: build
  script:
    - go11 build -race ./...

.test-go10:
  stage: test
  script:
    - export GOPATH=/go && go10 get ./... && go10 build
    - go10 test -v -cover ./tests/ci/...
    - go10 test -race ./tests/ci/...

.test-go11:
  stage: test
  script:
    - go11 build ./...
    - go11 test -v -cover ./tests/ci/...
    - go11 test -race ./tests/ci/...

build_rpm:
  stage: build_rpm
  script:
    - go11 mod vendor
    - ls -R $PREFIX/lb-experts/golbclient
    - ls -R /go/src/gitlab.cern.ch/lb-experts/golbclient
    - mkdir SOURCES version
    - tar cvf SOURCES/$PKG.tg  --exclude SOURCES --exclude .git --exclude .koji --exclude .gitlab-ci.yml --transform "s||$PKG/|" .
    - tar rvf SOURCES/$PKG.tg  --transform "s|go/src|$PKG/vendor/|"  $PREFIX/lb-experts/golbclient/vendor/github.com/
    - gzip -c SOURCES/$PKG.tg > SOURCES/$PKG.tgz
    - rm -rf SOURCES/$PKG.tg
    - rpmbuild -bs --define "_topdir $(pwd)" -D "dist ${DIST:-.ai7}" $SPEC
  artifacts:
    paths:
      - SRPMS/
    expire_in: 1 week


.kojicheck:
  stage: koji_scratch
  script:
    - echo "Checking if $PKG_REL exists"
    - if koji --config=.koji search -r build $PKG | grep $PKG_REL; then exit 1; fi
  allow_failure: true

.kojiscratch:
  stage: koji_scratch
  script:
    - export SRPM="SRPMS/${PKG_REL}.src.rpm"
    - echo "koji build --wait --scratch $KOJI_TARGET $SRPM"
    - koji --config=.koji build --wait --scratch $KOJI_TARGET $SRPM

.koji:
  stage: koji
  script:
    - export SRPM="SRPMS/${PKG_REL}.src.rpm"
    - echo "koji build --wait $KOJI_TARGET $SRPM"
    - koji --config=.koji build --wait $KOJI_TARGET $SRPM
  only:
    - tags

.tag_qa:
  stage: deploy_qa
  when: manual
  only:
    - tags
  script:
    - koji --config=.koji tag-pkg ${KOJI_TARGET}-qa ${PKG_REL}
  allow_failure: false

.tag_prod:
  stage: deploy_prod
  when: manual
  only:
    - tags
  script:
    - koji --config=.koji tag-pkg ${KOJI_TARGET}-stable ${PKG_REL}

